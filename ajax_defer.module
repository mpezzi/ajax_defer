<?php

/**
 * @file
 * Provides functionality to defer loading of render elements.
 */

define('AJAX_DEFER_VERSION', '1.0');

/**
 * Implements hook_init().
 */
function ajax_defer_init() {

  $expire = variable_get('ajax_defer_session_expire', 3600);
  ajax_defer_instance_manager()->clearExpired($expire);

}

/**
 * Implements hook_menu().
 */
function ajax_defer_menu() {

  $items = array();

  $items['system/ajax_defer/%'] = array(
    'page callback' => 'ajax_defer_ajax_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function ajax_defer_theme() {

  $items = array();

  $items['ajax_defer'] = array(
    'render element' => 'element',
  );

  return $items;

}

/**
 * Implements hook_library().
 */
function ajax_defer_library() {

  $items = array();

  $items['ajax_defer'] = array(
    'title' => 'Ajax Defer',
    'version' => AJAX_DEFER_VERSION,
    'js' => array(
      drupal_get_path('module', 'ajax_defer') . '/js/ajax_defer.js' => array('group' => JS_LIBRARY, 'weight' => 3),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
    ),
  );

  return $items;

}

/**
 * Implements hook_element_info().
 */
function ajax_defer_element_info() {

  $items = array();

  $items['ajax_defer'] = array(
    '#ajax_defer' => array(),
    '#pre_render' => array('ajax_defer_pre_render'),
    '#post_render' => array('ajax_defer_post_render'),
    '#theme_wrappers' => array('ajax_defer'),
  );

  return $items;

}

/**
 * Pre render callback;
 */
function ajax_defer_pre_render($elements) {

  if (!empty($elements['#ajax_defer']['processed'])) {
    return $elements;
  }

  $elements['#ajax_defer']['processed'] = FALSE;

  if (!empty($elements['#ajax_defer']['callback']) && function_exists($elements['#ajax_defer']['callback'])) {
    if (empty($elements['#ajax_defer']['instance'])) {
      $elements['#ajax_defer']['instance'] = md5(drupal_random_bytes(16));
    }

    if (empty($elements['#ajax_defer']['path'])) {
      $elements['#ajax_defer']['path'] = 'system/ajax_defer';
    }

    if (empty($elements['#ajax_defer']['data'])) {
      $elements['#ajax_defer']['data'] = array();
    }

    if (empty($elements['#id'])) {
      $elements['#id'] = drupal_html_id('ajax-defer-instance');
    }
    $elements['#ajax_defer']['id'] = $elements['#id'];

    $settings = array();
    $settings['ajax_defer']['instances'][$elements['#ajax_defer']['instance']] = array(
      'path' => url($elements['#ajax_defer']['path']),
    );

    $elements['#attached']['library'][] = array('ajax_defer', 'ajax_defer');
    $elements['#attached']['js'][] = array('type' => 'setting', 'data' => $settings);

    $elements['#ajax_defer']['processed'] = TRUE;
  }

  return $elements;

}

/**
 * Post render callback;
 */
function ajax_defer_post_render($content, $element) {

  if (!$element['#ajax_defer']['processed']) {
    return $content;
  }

  ajax_defer_unrender_children($element);

  $manager = ajax_defer_instance_manager();
  $manager->set($element['#ajax_defer']['instance'], $element);

  return $content;

}

/**
 * Page callback; Returns ajax commands for instances.
 *
 * @param string $hashes
 *   A string of hashes, delimited by hyphens.
 *
 */
function ajax_defer_ajax_callback($hashes) {

  $manager  = ajax_defer_instance_manager();
  $commands = array();

  foreach (explode('-', $hashes) as $id) {
    if ($instance = $manager->get($id)) {
      $element = $instance->data;
      $ajax_defer = $element['#ajax_defer'];

      $element['#theme_wrappers'] = array('container');
      $element['#attributes'] = array('id' => $element['#id'] . '-deferred');
      unset($element['#type']);
      unset($element['#ajax_defer']);

      $element_updated = call_user_func_array($ajax_defer['callback'], array($element, $ajax_defer['data']));
      $commands[] = ajax_command_replace('#' . $element['#id'], drupal_render($element_updated));
      $manager->clear($id);
    }
  }

  ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  exit;

}

/**
 * Unrender all of the children elements.
 *
 * This function removes all of the #printed and #children properties
 * from the render array. These properties prevent an element from being
 * printed again.
 *
 * @param array $element
 *   An element array.
 *
 */
function ajax_defer_unrender_children(&$element) {

  foreach (element_children($element) as $key) {
    $child = &$element[$key];
    if (is_array($child)) {
      unset($child['#printed']);
      unset($child['#children']);
      ajax_defer_unrender_children($child);
    }
    unset($child);
  }

  unset($element['#printed']);
  unset($element['#children']);

}

/**
 * Returns HTML for an ajax defer element.
 */
function theme_ajax_defer(&$variables) {

  $element = &$variables['element'];

  $variables['attributes']['id'] = $element['#id'];
  $variables['attributes']['data-instance'] = $element['#ajax_defer']['instance'];

  return '<div' . drupal_attributes($variables['attributes']) . '>' . $element['#children'] . '</div>';

}

/**
 * Returns an instance manager.
 */
function ajax_defer_instance_manager() {

  $manager = &drupal_static(__FUNCTION__, NULL);

  if (is_null($manager)) {
    $manager = new AjaxDeferSessionInstanceManager();
  }

  return $manager;

}
