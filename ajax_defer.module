<?php

/**
 * @file
 * Provides functionality to defer loading of render elements.
 */

define('AJAX_DEFER_VERSION', '1.0');

/**
 * Implements hook_init().
 */
function ajax_defer_init() {

  // Remove any expired instances for user if using session storage.
  if (variable_get('ajax_defer_storage_class') == 'AjaxDeferSessionStorage' && user_is_logged_in()) {
    ajax_defer_get_storage()->expire();
  }

}

/**
 * Implements hook_cron().
 */
function ajax_defer_cron() {

  if (variable_get('ajax_defer_storage_class') == 'AjaxDeferCacheStorage') {
    ajax_defer_get_storage()->expire();
  }

}

/**
 * Implements hook_menu().
 */
function ajax_defer_menu() {

  $items = array();

  $items['system/ajax-defer'] = array(
    'page callback' => 'ajax_defer_ajax_callback',
    'delivery callback' => 'ajax_deliver',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Implements hook_theme().
 */
function ajax_defer_theme() {

  $items = array();

  $items['ajax_defer'] = array(
    'render element' => 'element',
  );

  return $items;

}

/**
 * Implements hook_library().
 */
function ajax_defer_library() {

  $items = array();

  $items['ajax_defer'] = array(
    'title' => 'Ajax Defer',
    'version' => AJAX_DEFER_VERSION,
    'js' => array(
      drupal_get_path('module', 'ajax_defer') . '/js/defer.js' => array('group' => JS_LIBRARY, 'weight' => 3),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      array('system', 'jquery.bbq'),
    ),
  );

  return $items;

}

/**
 * Implements hook_element_info().
 */
function ajax_defer_element_info() {

  $items = array();

  $items['ajax_defer'] = array(
    '#theme_wrappers' => array('ajax_defer'),
    '#ajax_defer' => array(),
    '#pre_render' => array('ajax_defer_pre_render'),
    '#post_render' => array('ajax_defer_post_render'),
  );

  return $items;

}

/**
 * Pre render callback; Apply js settings for instance.
 */
function ajax_defer_pre_render($elements) {

  if (!empty($elements['#ajax_defer']['processed'])) {
    return $elements;
  }

  $elements['#ajax_defer']['processed'] = FALSE;

  // If callback exists set up the instance.
  if (!empty($elements['#ajax_defer']['callback']) && function_exists($elements['#ajax_defer']['callback'])) {

    // Set default instance id.
    if (empty($elements['#ajax_defer']['instance'])) {
      $elements['#ajax_defer']['instance'] = md5(drupal_random_bytes(16));
    }

    // Set default callback path.
    if (empty($elements['#ajax_defer']['ajax_path'])) {
      $elements['#ajax_defer']['ajax_path'] = 'system/ajax-defer';
    }

    // Set default data.
    if (empty($elements['#ajax_defer']['data'])) {
      $elements['#ajax_defer']['data'] = array();
    }

    // Set default delay.
    if (empty($elements['#ajax_defer']['delay'])) {
      $elements['#ajax_defer']['delay'] = variable_get('ajax_defer_default_delay', 2000);
    }

    // Set default delay.
    if (empty($elements['#ajax_defer']['group'])) {
      $elements['#ajax_defer']['group'] = 'no-group';
    }

    // Set default id.
    if (empty($elements['#id'])) {
      $elements['#id'] = drupal_html_id('ajax-defer-instance');
    }

    // Create js settings for this instance.
    $settings = array();
    $settings['ajax_defer']['instances'][$elements['#ajax_defer']['instance']] = array(
      'path' => url($elements['#ajax_defer']['ajax_path']),
      'delay' => $elements['#ajax_defer']['delay'],
      'group' => $elements['#ajax_defer']['group'],
    );

    $elements['#attached']['library'][] = array('ajax_defer', 'ajax_defer');
    $elements['#attached']['js'][] = array('type' => 'setting', 'data' => $settings);

    $elements['#ajax_defer']['processed'] = TRUE;
  }

  return $elements;

}

/**
 * Post render callback; Save the element to an instance.
 */
function ajax_defer_post_render($content, $element) {

  if (!$element['#ajax_defer']['processed']) {
    return $content;
  }

  // Remove #printed and #children properties.
  ajax_defer_unrender_children($element);

  // Save the instance of this element.
  $expire = variable_get('ajax_defer_storage_expire', 3600);
  $storage = ajax_defer_get_storage();
  $storage->set($element['#ajax_defer']['instance'], $element, REQUEST_TIME + $expire);

  return $content;

}

/**
 * Page callback; Returns ajax commands for instances.
 *
 */
function ajax_defer_ajax_callback() {

  $storage    = ajax_defer_get_storage();
  $params     = drupal_get_query_parameters();
  $commands   = array();

  // Get instances from query parameter.
  if (isset($params['instances'])) {
    if (is_array($params['instances'])) {
      $instances = $params['instances'];
    }
    else {
      $instances = array($params['instances']);
    }
  }

  // Go through each hash and get new content that should replace it.
  if (!empty($instances)) {
    foreach ($instances as $id) {
      if ($element = $storage->get($id)) {

        // Save reference of ajax_defer settings.
        $ajax_defer = $element['#ajax_defer'];

        // Include required files if needed.
        if (isset($ajax_defer['path']) && isset($ajax_defer['file'])) {
          $file = $ajax_defer['path'] . '/' . $ajax_defer['file'];
        }
        else if (isset($ajax_defer['module']) && isset($ajax_defer['file'])) {
          $file = drupal_get_path('module', $ajax_defer['module']) . '/' . $ajax_defer['file'];
        }
        if (isset($file) && is_file($file)) {
          require_once $file;
        }

        // Remove ajax_defer properties from the containing element.
        $element['#theme_wrappers'] = array('container');
        $element['#attributes'] = array('id' => $element['#id'] . '-deferred');
        unset($element['#type']);
        unset($element['#ajax_defer']);

        // Fire the callback and return the updated element, replace it using
        // the ajax_command_replace on the original element id.
        $element_updated = call_user_func_array($ajax_defer['callback'], array($element, $ajax_defer['data']));
        $commands[] = ajax_command_replace('#' . $element['#id'], drupal_render($element_updated));

        // Clear out this instance, it's not needed anymore.
        $storage->clear($id);
      }
    }
  }

  // If there are instance requested, but no stored instances were found
  // reload the current page so that those can be properly applied. Ignore
  // the reload command if ajax_defer_reloaded is in the query parameters
  // to prevent a reload loop.
  if (!empty($instances) && empty($commands) && !isset($params['ajax_defer_reloaded'])) {
    module_load_include('inc', 'ajax_defer', 'ajax_defer.ajax');
    $commands[] = ajax_defer_command_reload();
  }

  return array('#type' => 'ajax', '#commands' => $commands);

}

/**
 * Unrender all of the children elements.
 *
 * This function removes all of the #printed and #children properties
 * from the render array. These properties prevent an element from being
 * printed again.
 *
 * @param array $element
 *   An element array.
 *
 */
function ajax_defer_unrender_children(&$element) {

  // Unrender all child elements.
  foreach (element_children($element) as $key) {
    $child = &$element[$key];
    if (is_array($child)) {
      unset($child['#printed']);
      unset($child['#children']);
      ajax_defer_unrender_children($child);
    }
    unset($child);
  }

  // Unrender this element.
  unset($element['#printed']);
  unset($element['#children']);

}

/**
 * Returns an instance manager.
 *
 * @return AjaxDeferStorageInstance object
 *
 */
function ajax_defer_get_storage() {

  $storage = &drupal_static(__FUNCTION__, NULL);

  // Create new manager instance.
  if (is_null($storage)) {
    $class = variable_get('ajax_defer_storage_class', 'AjaxDeferSessionStorage');
    $storage = new $class();
  }

  return $storage;

}

/**
 * Returns HTML for an ajax defer element.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *   - attributes: The attributes applied to the element.
 *
 */
function theme_ajax_defer(&$variables) {

  $element = &$variables['element'];

  $variables['attributes']['id'] = $element['#id'];
  $variables['attributes']['class'][] = 'ajax-defer-instance';
  $variables['attributes']['data-instance'] = $element['#ajax_defer']['instance'];

  return '<div' . drupal_attributes($variables['attributes']) . '>' . $element['#children'] . '</div>';

}
